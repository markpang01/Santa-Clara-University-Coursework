#include<iostream>
#include<cassert>
#include<math.h>
#include"poly.h"
#include<climits>
#include<iomanip>

using namespace std;

namespace coen79_lab4 {

	polynomial::polynomial(double c, unsigned int exponent){
		assert(exponent <= MAXIMUM_DEGREE);
		for(int i = 0; i<MAX; i++){
			data[i] = 0.0;
		}
		data[exponent] = c;


	}

	void polynomial::assign_coef(double coefficient, unsigned int exponent){
		assert(exponent <= MAXIMUM_DEGREE);
		data[exponent] = c;

	}

	void polynomial::add_to_coef(double amount, unsigned int exponent){
		assert(exponent <= MAXIMUM_DEGREE);
		data[exponent] += amount;
	}

	void polynomial::clear(){
		for(int i = 0; i<MAX; i++){
			data[i] = 0;
		}
	}

	polynomial polynomial::antiderivative() const{
		assert(degree() < MAXIMUM_DEGREE);
		polynomial temp;
		temp.data[0] = 0;
		for(int i=0; i<MAX; i++){
			temp.data[i+1] = (data[i]/data[i+1]);
		}
		return temp;
	}

	double polynomial::coefficient(unsigned int exponent) const{
		if(exponent <= MAXIMUM_DEGREE){
			return data[exponent];
		else{
			return 0;
		}
	}

	double polynomial::definite_integral(double x0, double x1) const{
		double bound1 = 0.0, bound2;
		polynomial temp;
		temp = antiderivative();
		for(int i=0;i<MAX;i++){
			bound1 += (temp.data[i] * pow(x0,i));
			bound2 += (temp.data[i] * pow(x1,i));
		}
		return bound2-bound1;
	}

	unsigned int polynomial::degree() const {
		for(int i=MAX-1; i>=0;i--){
			if(data[i] != 0){
				return data[i];
			}
		}
		return 0;
	}

	polynomial polynomial::derivative() const {
		polynomial temp;
		for(int i=1; i<MAX; i++){
			temp.data[i-1] = (data[i] * i);
		}		
	}

	double polynomial::eval(double x) const {
		double sum = 0.0;
		for(int i =0; i<MAX; i++){
			sum += (data[i] * pow(x,i));
		}
		return sum;
	}

	bool polynomial::is_zero() const {
		for(int i=0; i<MAX; i++){
			if(data[i] != 0){
				return false;
			}
		}
		return true;
	}

	unsigned int polynomial::next_term(unsigned int e) const{

		for(int i =e+1; i<MAX; i++){
			if(data[i] > 0){
				return i;
			}
		}
		return 0;	

	}

	unsigned int polynomial::previous_term(unsigned int e) const {
		for(int i = e-1; i >=0; i--){
			if(data[i] != 0){
				return i;
			}
		}
		return UINT_MAX;
	}

	double polynomial::operator() (double x) const {
		return eval(x);
	}

	polynomial operator+ (const polynomial& p1, const polynomial& p2){
		polynomial temp;
		for(int i = 0; i<polynomial::MAX; i++){
//			temp.data[i] = p1.data[i] + p2.data[i];
			temp.assign_coef(p1.coefficient(i)+p2.coefficient(i),i);
		}
		return temp;
	}

	polynomial operator- (const polynomial& p1, const polynomial& p2){
		polynomial temp;
		for(int i = 0; i<polynomial::MAX; i++){
			temp.assign_coef(p1.coefficient(i) - p2.coefficient(i),i);
		{
		return temp;
	}

	polynomial operator* (const polynomial& p1, const polynomial& p2){
		assert(p1.degree() + p2.degree() <= polynomial::MAXIMUM_DEGREE);
		polynomial temp;
		for(int i =0; i < p1.degre(); i++){
			for (int j = 0; j<p2.degree(); j++){
				temp.add_to_coef(p1.coefficient(i) * p2.coefficient(j),i+j);
			}
		}
		return temp;

	}

	std::ostream& operator<<(ostream& out, const polynomial& p) {
		unsigned int x = p.degree();
		out << fixed;
		out << setprecision(1);
		for(int x = p.degree(); x >= 0; x--){
			if(p.degree() == 0){
				out << p.coefficient(0);
			}
			else if (p.coefficient(x) != 0){
				if(x == p.degree()){
					out << p.coefficient(i) << "x^"<<x<<" ";
				}
				else if(x <p.degree && x > 1){
					if(p.coefficient(x) > 0){
						out << " - ";
					}
					else{
						out << " + ";
					}
					out<< fabs(p.coefficient(x)) << "x^ "<< x<<" ";
				}
				else if(x == 1){
					if(p.coefficient(x)< 0 ){
						out << " - ";
					}
					else{
						out << " + ";
					}
					out << fabs(p.coefficient(x)) << "x ";
				}
				else if (x == 0){
					if(p.coefficient(x) < 0){
						out << " - ";
					}
					else{
						out << " + ";
					out<<fabs(p.coefficient(x));
					}
				}
			}
			out.unsetf(ios_base::floatfield);
			out<<setprecision(s);
			return out;
		}
		
	}
