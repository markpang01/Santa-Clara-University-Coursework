//
//  Behnam Dezfouli
//  CSEN, Santa Clara University
//

// This program implements a server that accepts connection from a client and copies the received bytes to a file
//
// The input arguments are as follows:
// argv[1]: Sever's port number

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>


int main (int argc, char *argv[]){
	char    message[10] = "received!";  // message to be sent to the client when the destination file name is received
	int     net_bytes_read;             // numer of bytes received over socket
	int     socket_fd = 0;              // socket descriptor
	int     connection_fd = 0;          // new connection descriptor
	struct  sockaddr_in serv_addr;      // Address format structure
	char    net_buff[1024];             // buffer to hold characters read from socket
	FILE    *dest_file;                 // pointer to the file that will include the received bytes over socket
	int sockfd;

	if (argc < 2){// Note: the name of the program is counted as an argument
		printf ("Port number not specified!\n");
		return 1;
	}
	
	if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){
		perror("cant connect to socket");
		return 0;
	}

	
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(atoi(argv[1]));
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	
	bind(sockfd, (struct sockaddr*) &serv_addr, sizeof(serv_addr));
	if(bind <0){
		perror("bind unsuccessful.\n");
		return 0;
	}

	listen(sockfd, 10);
	int new_socket = accept(sockfd, (struct sockaddr*)NULL, NULL);	

	char filename[20];
	int n;
	n = read(new_socket, filename, sizeof(filename));
	if(n<0){
		perror("ERROR reading filename");
		return 0;
	}
	
	FILE *write;
	write = fopen(filename,"w");
	if(write ==NULL){
	  printf("cant open dest file.\n");
	  return 0;
	}

	void *buffer;
	int bytes;
	buffer = malloc(size_t)100);
while((bytes = read(new_socket,buffer,100))>0){
  if(fwrite(buffer,1,bytes,write)<0){
    printf("error writing\n");
    return 0;
  }
 }
	


	// Implement me
	// Implement me
	// Implement me

	return 0;
}
