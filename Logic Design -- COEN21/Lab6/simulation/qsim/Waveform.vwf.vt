// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2022 16:01:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab6_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab6_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:0] KEY;
reg [11:0] SW;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [2:0] LEDG;
wire [3:0] LEDR;
wire [3:0] result;

// assign statements (if any)                          
Lab6_2 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.result(result),
	.SW(SW)
);
initial 
begin 
#1000000 $finish;
end 

// KEY
initial
begin
	KEY = 1'b0;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b0;
	SW[11] = #512000 1'b1;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b0;
	SW[10] = #256000 1'b1;
	SW[10] = #256000 1'b0;
	SW[10] = #256000 1'b1;
end 
// SW[ 9 ]
initial
begin
	repeat(3)
	begin
		SW[9] = 1'b0;
		SW[9] = #128000 1'b1;
		# 128000;
	end
	SW[9] = 1'b0;
	SW[9] = #128000 1'b1;
end 
// SW[ 8 ]
initial
begin
	repeat(7)
	begin
		SW[8] = 1'b0;
		SW[8] = #64000 1'b1;
		# 64000;
	end
	SW[8] = 1'b0;
	SW[8] = #64000 1'b1;
end 
// SW[ 7 ]
initial
begin
	repeat(15)
	begin
		SW[7] = 1'b0;
		SW[7] = #32000 1'b1;
		# 32000;
	end
	SW[7] = 1'b0;
	SW[7] = #32000 1'b1;
end 
// SW[ 6 ]
initial
begin
	repeat(31)
	begin
		SW[6] = 1'b0;
		SW[6] = #16000 1'b1;
		# 16000;
	end
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	repeat(62)
	begin
		SW[5] = 1'b0;
		SW[5] = #8000 1'b1;
		# 8000;
	end
	SW[5] = 1'b0;
end 
// SW[ 4 ]
always
begin
	SW[4] = 1'b0;
	SW[4] = #4000 1'b1;
	#4000;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
always
begin
	SW[2] = 1'b0;
	SW[2] = #1000 1'b1;
	#1000;
end 
// SW[ 1 ]
always
begin
	SW[1] = 1'b0;
	SW[1] = #500 1'b1;
	#500;
end 
// SW[ 0 ]
always
begin
	SW[0] = 1'b0;
	SW[0] = #250 1'b1;
	#250;
end 
endmodule

